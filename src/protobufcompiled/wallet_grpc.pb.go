// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: wallet.proto

package protobufcompiled

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	WalletClientAPI_Alive_FullMethodName               = "/computantis.WalletClientAPI/Alive"
	WalletClientAPI_WalletPublicAddress_FullMethodName = "/computantis.WalletClientAPI/WalletPublicAddress"
	WalletClientAPI_Issue_FullMethodName               = "/computantis.WalletClientAPI/Issue"
	WalletClientAPI_Approve_FullMethodName             = "/computantis.WalletClientAPI/Approve"
	WalletClientAPI_Reject_FullMethodName              = "/computantis.WalletClientAPI/Reject"
	WalletClientAPI_Waiting_FullMethodName             = "/computantis.WalletClientAPI/Waiting"
	WalletClientAPI_Saved_FullMethodName               = "/computantis.WalletClientAPI/Saved"
	WalletClientAPI_WebHook_FullMethodName             = "/computantis.WalletClientAPI/WebHook"
)

// WalletClientAPIClient is the client API for WalletClientAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClientAPIClient interface {
	Alive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WalletPublicAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Address, error)
	Issue(ctx context.Context, in *IssueTrx, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Approve(ctx context.Context, in *TransactionApproved, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Reject(ctx context.Context, in *TrxHash, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Waiting(ctx context.Context, in *NotaryNode, opts ...grpc.CallOption) (*Transactions, error)
	Saved(ctx context.Context, in *TrxHash, opts ...grpc.CallOption) (*Transaction, error)
	WebHook(ctx context.Context, in *CreateWebHook, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type walletClientAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClientAPIClient(cc grpc.ClientConnInterface) WalletClientAPIClient {
	return &walletClientAPIClient{cc}
}

func (c *walletClientAPIClient) Alive(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletClientAPI_Alive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClientAPIClient) WalletPublicAddress(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Address, error) {
	out := new(Address)
	err := c.cc.Invoke(ctx, WalletClientAPI_WalletPublicAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClientAPIClient) Issue(ctx context.Context, in *IssueTrx, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletClientAPI_Issue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClientAPIClient) Approve(ctx context.Context, in *TransactionApproved, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletClientAPI_Approve_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClientAPIClient) Reject(ctx context.Context, in *TrxHash, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletClientAPI_Reject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClientAPIClient) Waiting(ctx context.Context, in *NotaryNode, opts ...grpc.CallOption) (*Transactions, error) {
	out := new(Transactions)
	err := c.cc.Invoke(ctx, WalletClientAPI_Waiting_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClientAPIClient) Saved(ctx context.Context, in *TrxHash, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, WalletClientAPI_Saved_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClientAPIClient) WebHook(ctx context.Context, in *CreateWebHook, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WalletClientAPI_WebHook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletClientAPIServer is the server API for WalletClientAPI service.
// All implementations must embed UnimplementedWalletClientAPIServer
// for forward compatibility
type WalletClientAPIServer interface {
	Alive(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	WalletPublicAddress(context.Context, *emptypb.Empty) (*Address, error)
	Issue(context.Context, *IssueTrx) (*emptypb.Empty, error)
	Approve(context.Context, *TransactionApproved) (*emptypb.Empty, error)
	Reject(context.Context, *TrxHash) (*emptypb.Empty, error)
	Waiting(context.Context, *NotaryNode) (*Transactions, error)
	Saved(context.Context, *TrxHash) (*Transaction, error)
	WebHook(context.Context, *CreateWebHook) (*emptypb.Empty, error)
	mustEmbedUnimplementedWalletClientAPIServer()
}

// UnimplementedWalletClientAPIServer must be embedded to have forward compatible implementations.
type UnimplementedWalletClientAPIServer struct {
}

func (UnimplementedWalletClientAPIServer) Alive(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alive not implemented")
}
func (UnimplementedWalletClientAPIServer) WalletPublicAddress(context.Context, *emptypb.Empty) (*Address, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WalletPublicAddress not implemented")
}
func (UnimplementedWalletClientAPIServer) Issue(context.Context, *IssueTrx) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedWalletClientAPIServer) Approve(context.Context, *TransactionApproved) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approve not implemented")
}
func (UnimplementedWalletClientAPIServer) Reject(context.Context, *TrxHash) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reject not implemented")
}
func (UnimplementedWalletClientAPIServer) Waiting(context.Context, *NotaryNode) (*Transactions, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Waiting not implemented")
}
func (UnimplementedWalletClientAPIServer) Saved(context.Context, *TrxHash) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Saved not implemented")
}
func (UnimplementedWalletClientAPIServer) WebHook(context.Context, *CreateWebHook) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebHook not implemented")
}
func (UnimplementedWalletClientAPIServer) mustEmbedUnimplementedWalletClientAPIServer() {}

// UnsafeWalletClientAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletClientAPIServer will
// result in compilation errors.
type UnsafeWalletClientAPIServer interface {
	mustEmbedUnimplementedWalletClientAPIServer()
}

func RegisterWalletClientAPIServer(s grpc.ServiceRegistrar, srv WalletClientAPIServer) {
	s.RegisterService(&WalletClientAPI_ServiceDesc, srv)
}

func _WalletClientAPI_Alive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletClientAPIServer).Alive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletClientAPI_Alive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletClientAPIServer).Alive(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletClientAPI_WalletPublicAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletClientAPIServer).WalletPublicAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletClientAPI_WalletPublicAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletClientAPIServer).WalletPublicAddress(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletClientAPI_Issue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueTrx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletClientAPIServer).Issue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletClientAPI_Issue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletClientAPIServer).Issue(ctx, req.(*IssueTrx))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletClientAPI_Approve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionApproved)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletClientAPIServer).Approve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletClientAPI_Approve_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletClientAPIServer).Approve(ctx, req.(*TransactionApproved))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletClientAPI_Reject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrxHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletClientAPIServer).Reject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletClientAPI_Reject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletClientAPIServer).Reject(ctx, req.(*TrxHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletClientAPI_Waiting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotaryNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletClientAPIServer).Waiting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletClientAPI_Waiting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletClientAPIServer).Waiting(ctx, req.(*NotaryNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletClientAPI_Saved_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TrxHash)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletClientAPIServer).Saved(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletClientAPI_Saved_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletClientAPIServer).Saved(ctx, req.(*TrxHash))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletClientAPI_WebHook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebHook)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletClientAPIServer).WebHook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletClientAPI_WebHook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletClientAPIServer).WebHook(ctx, req.(*CreateWebHook))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletClientAPI_ServiceDesc is the grpc.ServiceDesc for WalletClientAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletClientAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "computantis.WalletClientAPI",
	HandlerType: (*WalletClientAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Alive",
			Handler:    _WalletClientAPI_Alive_Handler,
		},
		{
			MethodName: "WalletPublicAddress",
			Handler:    _WalletClientAPI_WalletPublicAddress_Handler,
		},
		{
			MethodName: "Issue",
			Handler:    _WalletClientAPI_Issue_Handler,
		},
		{
			MethodName: "Approve",
			Handler:    _WalletClientAPI_Approve_Handler,
		},
		{
			MethodName: "Reject",
			Handler:    _WalletClientAPI_Reject_Handler,
		},
		{
			MethodName: "Waiting",
			Handler:    _WalletClientAPI_Waiting_Handler,
		},
		{
			MethodName: "Saved",
			Handler:    _WalletClientAPI_Saved_Handler,
		},
		{
			MethodName: "WebHook",
			Handler:    _WalletClientAPI_WebHook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wallet.proto",
}
