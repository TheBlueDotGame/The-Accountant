// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: synchronizer.proto

package protobufcompiled

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Synchronizer_AddToQueue_FullMethodName      = "/computantis.Synchronizer/AddToQueue"
	Synchronizer_RemoveFromQueue_FullMethodName = "/computantis.Synchronizer/RemoveFromQueue"
)

// SynchronizerClient is the client API for Synchronizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SynchronizerClient interface {
	AddToQueue(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*QueueStatus, error)
	RemoveFromQueue(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*QueueStatus, error)
}

type synchronizerClient struct {
	cc grpc.ClientConnInterface
}

func NewSynchronizerClient(cc grpc.ClientConnInterface) SynchronizerClient {
	return &synchronizerClient{cc}
}

func (c *synchronizerClient) AddToQueue(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*QueueStatus, error) {
	out := new(QueueStatus)
	err := c.cc.Invoke(ctx, Synchronizer_AddToQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *synchronizerClient) RemoveFromQueue(ctx context.Context, in *NodeInfo, opts ...grpc.CallOption) (*QueueStatus, error) {
	out := new(QueueStatus)
	err := c.cc.Invoke(ctx, Synchronizer_RemoveFromQueue_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SynchronizerServer is the server API for Synchronizer service.
// All implementations must embed UnimplementedSynchronizerServer
// for forward compatibility
type SynchronizerServer interface {
	AddToQueue(context.Context, *NodeInfo) (*QueueStatus, error)
	RemoveFromQueue(context.Context, *NodeInfo) (*QueueStatus, error)
	mustEmbedUnimplementedSynchronizerServer()
}

// UnimplementedSynchronizerServer must be embedded to have forward compatible implementations.
type UnimplementedSynchronizerServer struct {
}

func (UnimplementedSynchronizerServer) AddToQueue(context.Context, *NodeInfo) (*QueueStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToQueue not implemented")
}
func (UnimplementedSynchronizerServer) RemoveFromQueue(context.Context, *NodeInfo) (*QueueStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromQueue not implemented")
}
func (UnimplementedSynchronizerServer) mustEmbedUnimplementedSynchronizerServer() {}

// UnsafeSynchronizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SynchronizerServer will
// result in compilation errors.
type UnsafeSynchronizerServer interface {
	mustEmbedUnimplementedSynchronizerServer()
}

func RegisterSynchronizerServer(s grpc.ServiceRegistrar, srv SynchronizerServer) {
	s.RegisterService(&Synchronizer_ServiceDesc, srv)
}

func _Synchronizer_AddToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).AddToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Synchronizer_AddToQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).AddToQueue(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Synchronizer_RemoveFromQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SynchronizerServer).RemoveFromQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Synchronizer_RemoveFromQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SynchronizerServer).RemoveFromQueue(ctx, req.(*NodeInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Synchronizer_ServiceDesc is the grpc.ServiceDesc for Synchronizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Synchronizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "computantis.Synchronizer",
	HandlerType: (*SynchronizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToQueue",
			Handler:    _Synchronizer_AddToQueue_Handler,
		},
		{
			MethodName: "RemoveFromQueue",
			Handler:    _Synchronizer_RemoveFromQueue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synchronizer.proto",
}

const (
	QueueListener_QueueUpdate_FullMethodName = "/computantis.QueueListener/QueueUpdate"
	QueueListener_Ping_FullMethodName        = "/computantis.QueueListener/Ping"
)

// QueueListenerClient is the client API for QueueListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueueListenerClient interface {
	QueueUpdate(ctx context.Context, in *QueueStatus, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type queueListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewQueueListenerClient(cc grpc.ClientConnInterface) QueueListenerClient {
	return &queueListenerClient{cc}
}

func (c *queueListenerClient) QueueUpdate(ctx context.Context, in *QueueStatus, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QueueListener_QueueUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queueListenerClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QueueListener_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueueListenerServer is the server API for QueueListener service.
// All implementations must embed UnimplementedQueueListenerServer
// for forward compatibility
type QueueListenerServer interface {
	QueueUpdate(context.Context, *QueueStatus) (*emptypb.Empty, error)
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	mustEmbedUnimplementedQueueListenerServer()
}

// UnimplementedQueueListenerServer must be embedded to have forward compatible implementations.
type UnimplementedQueueListenerServer struct {
}

func (UnimplementedQueueListenerServer) QueueUpdate(context.Context, *QueueStatus) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueueUpdate not implemented")
}
func (UnimplementedQueueListenerServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedQueueListenerServer) mustEmbedUnimplementedQueueListenerServer() {}

// UnsafeQueueListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueueListenerServer will
// result in compilation errors.
type UnsafeQueueListenerServer interface {
	mustEmbedUnimplementedQueueListenerServer()
}

func RegisterQueueListenerServer(s grpc.ServiceRegistrar, srv QueueListenerServer) {
	s.RegisterService(&QueueListener_ServiceDesc, srv)
}

func _QueueListener_QueueUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueListenerServer).QueueUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueListener_QueueUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueListenerServer).QueueUpdate(ctx, req.(*QueueStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueueListener_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueueListenerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueueListener_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueueListenerServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// QueueListener_ServiceDesc is the grpc.ServiceDesc for QueueListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueueListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "computantis.QueueListener",
	HandlerType: (*QueueListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueUpdate",
			Handler:    _QueueListener_QueueUpdate_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _QueueListener_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "synchronizer.proto",
}
