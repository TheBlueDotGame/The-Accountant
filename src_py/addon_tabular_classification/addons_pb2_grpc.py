# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import addons_pb2 as addons__pb2


class AddonsAPIStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AnalyzeTransaction = channel.unary_unary(
                '/computantis.AddonsAPI/AnalyzeTransaction',
                request_serializer=addons__pb2.AddonsMessage.SerializeToString,
                response_deserializer=addons__pb2.AddonsError.FromString,
                )


class AddonsAPIServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AnalyzeTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AddonsAPIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AnalyzeTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.AnalyzeTransaction,
                    request_deserializer=addons__pb2.AddonsMessage.FromString,
                    response_serializer=addons__pb2.AddonsError.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'computantis.AddonsAPI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AddonsAPI(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AnalyzeTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/computantis.AddonsAPI/AnalyzeTransaction',
            addons__pb2.AddonsMessage.SerializeToString,
            addons__pb2.AddonsError.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
