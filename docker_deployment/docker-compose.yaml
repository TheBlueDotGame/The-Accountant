version: '3.8'

networks:
  computantis_network:
    driver: bridge

volumes:
  prometheus_data: {}
  grafana-data:
  zincsearch_data_container:

services:
  nats:
    container_name: nats
    image: nats
    command: "-c /etc/nats/nats.conf"
    volumes:
       - "../conf/nats_config/:/etc/nats"
    ports:
      - "6222:6222"
      - "4222:4222"
    expose:
      - 4222
    restart: unless-stopped
    networks:
      - computantis_network

  zincsearch:
    image: public.ecr.aws/zinclabs/zincsearch:latest
    container_name: zincsearch
    environment:
      ZINC_FIRST_ADMIN_USER: admin
      ZINC_FIRST_ADMIN_PASSWORD: zincsearch
      ZINC_PROMETHEUS_ENABLE: true
    ports:
      - 4080:4080
    expose:
      - 4080
    volumes:
      - zincsearch_data_container:/data
    networks:
      - computantis_network

  notary-node-genesis:
    container_name: notary-node-genesis
    build: 
      context: ./..
      dockerfile: docker_deployment/Dockerfile
      args: 
        - "APPLICATION=node"
        - "CONFIG=setup_notary_genesis.yaml"
        - "WALLET=wallet_notary_genesis"
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "8080:8080"
    expose:
     - 8000
     - 8080
    networks:
      - computantis_network
    depends_on:
      nats:
        condition: service_started
  
  notary-node-one:
    container_name: notary-node-one
    build: 
      context: ./..
      dockerfile: docker_deployment/Dockerfile
      args: 
        - "APPLICATION=node"
        - "CONFIG=setup_notary_one.yaml"
        - "WALLET=wallet_notary_one"
    restart: unless-stopped
    expose:
     - 8000
     - 8080
    networks:
      - computantis_network
    depends_on:
      notary-node-genesis:
        condition: service_started
  
  notary-node-two:
    container_name: notary-node-two
    build: 
      context: ./..
      dockerfile: docker_deployment/Dockerfile
      args: 
        - "APPLICATION=node"
        - "CONFIG=setup_notary_two.yaml"
        - "WALLET=wallet_notary_two"
    restart: unless-stopped
    expose:
     - 8000
     - 8080
    networks:
      - computantis_network
    depends_on:
      notary-node-genesis:
        condition: service_started
 
  webhooks-node:
    container_name: webhooks-node
    build: 
      context: ./..
      dockerfile: docker_deployment/Dockerfile
      args: 
        - "APPLICATION=webhooks"
        - "CONFIG=setup_notary_genesis.yaml"
    environment:
     - GOMAXPROCS=1
    restart: unless-stopped
    ports:
      - "8010:8000"
    networks:
      - computantis_network
    depends_on:
      notary-node-two:
        condition: service_started
  
  client-node-1:
    container_name: client-node-1
    build: 
      context: ./..
      dockerfile: docker_deployment/Dockerfile
      args: 
        - "APPLICATION=client"
        - "CONFIG=setup_client_1.yaml"
        - "WALLET=wallet_client_1"
    profiles: ["demo"]
    environment:
     - GOMAXPROCS=1
    restart: unless-stopped
    ports:
      - "8020:8000"
    networks:
      - computantis_network
    depends_on:
      webhooks-node:
        condition: service_started

  client-node-2:
    container_name: client-node-2
    build: 
      context: ./..
      dockerfile: docker_deployment/Dockerfile
      args: 
        - "APPLICATION=client"
        - "CONFIG=setup_client_2.yaml"
        - "WALLET=wallet_client_2"
    profiles: ["demo"]
    environment:
     - GOMAXPROCS=1
    restart: unless-stopped
    ports:
      - "8030:8000"
    networks:
      - computantis_network
    depends_on:
      webhooks-node:
        condition: service_started

  client-node-0:
    container_name: client-node-0
    build: 
      context: ./..
      dockerfile: docker_deployment/Dockerfile
      args: 
        - "APPLICATION=client"
        - "CONFIG=setup_client_0.yaml"
        - "WALLET=wallet_client_0"
    profiles: ["demo"]
    environment:
     - GOMAXPROCS=1
    restart: unless-stopped
    ports:
      - "8040:8000"
    networks:
      - computantis_network
    depends_on:
      webhooks-node:
        condition: service_started

  # demo only
  subscriber-node:
    container_name: subscriber-node
    build:
      context: ./..
      dockerfile: docker_deployment/Dockerfile.emulators
      args:
        - "APPLICATION=emulator"
        - "ROLE=subscriber"
        - "DATAFILE=minmax.json"
        - "CONFIG=setup_emulator_subscriber.yaml"

    environment:
     - GOMAXPROCS=1
    profiles: ["demo"]
    restart: unless-stopped
    ports:
      - "8060:8060"
    networks:
      - computantis_network
    depends_on:
      webhooks-node:
        condition: service_started

  # demo only
  publisher-node:
    container_name: publisher-node
    build:
      context: ./..
      dockerfile: docker_deployment/Dockerfile.emulators
      args:
        - "APPLICATION=emulator"
        - "ROLE=publisher"
        - "DATAFILE=data.json"
        - "CONFIG=setup_emulator_publisher.yaml"
    environment:
     - GOMAXPROCS=1
    profiles: ["demo"]
    restart: unless-stopped
    networks:
      - computantis_network
    depends_on:
      subscriber-node:
        condition: service_started

  spice-transfer-emulator-node:
    container_name: spice-transfer-emulator-node
    build:
      context: ./..
      dockerfile: docker_deployment/Dockerfile.emulators
      args:
        - "APPLICATION=emulator"
        - "ROLE=suplier"
        - "DATAFILE=data.json"
        - "CONFIG=setup_emulator_spice_spice_suplier.yaml"
    environment:
     - GOMAXPROCS=1
    profiles: ["demo"]
    restart: unless-stopped
    networks:
      - computantis_network
    depends_on:
      subscriber-node:
        condition: service_started

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    environment:
     - GOMAXPROCS=2
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    ports:
      - "9100:9100"
    networks:
      - computantis_network

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - "../conf/prometheus.yaml:/etc/prometheus/prometheus.yml"
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    expose:
      - 9090
    ports:
      - "9090:9090"
    networks:
      - computantis_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3000:3000
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      
